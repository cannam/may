
module yetilab.block.blockfuncs;

b = load yetilab.block.block;
vec = load yetilab.block.fvector;

load yetilab.block.blocktype;

sum' bl =
   (v = b.data bl;
    tot = new double[1];
    for [0..length v - 1] do i:
        tot[0] := tot[0] + v[i]
    done;
    tot[0]);

mean bl =
    case b.length bl of
        0: 0;
        len: sum' bl / len
    esac;

multiply b1 b2 =
   (v1 = b.data b1;
    v2 = b.data b2;
    len = if length v1 < length v2 then length v1 else length v2 fi;
    bb = vec.zeros len;
    for [0..len-1] do i:
        bb[i] := v1[i] * v2[i]
    done;
    b.block bb);

divideBy n bl =
    b.fromList (map (/ n) (b.list bl));

sqr bl =
    multiply bl bl;

rms =
    sqrt . mean . sqr;

sqrt' =
    b.fromList . (map sqrt) . b.list;

fftshift bl =
   (len = b.length bl;
    half = int(len/2 + 0.5); // round up for odd-length sequences
    b.concat [b.rangeOf half (len-half) bl, b.rangeOf 0 half bl]);

ifftshift bl =
   (len = b.length bl;
    half = int(len/2); // round down for odd-length sequences
    b.concat [b.rangeOf half (len-half) bl, b.rangeOf 0 half bl]);

{
sum is block -> number = sum',
mean is block -> number,
multiply is block -> block -> block, 
divideBy is number -> block -> block, 
sqr is block -> block,
sqrt is block -> block = sqrt',
rms is block -> number,
fftshift is block -> block,
ifftshift is block -> block,
}


        
