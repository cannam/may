
module may.matrix.test.test_complexmatrix;

mat = load may.matrix;
vec = load may.vector;
cm = load may.matrix.complex;
complex = load may.complex;

load may.vector.type;
load may.matrix.type;
load may.matrix.complextype;

{ compare, compareUsing } = load may.test.test;

aTestMatrix () =
   (// 1+0i 0-2i 3.5+6i
    // 0+0i 4-3i 1-0.2i
    reals = mat.newMatrix (RowMajor ()) (map vec.fromList [[1,0,3.5],[0,4,1]]);
    imags = mat.newMatrix (RowMajor ()) (map vec.fromList [[0,-2,6],[0,-3,-0.2]]);
    cm.complex reals imags);

[

"enumerate": \(
    // 1+0i 0-2i 3+0i
    // 4-1i 5-3i 0+0i
    reals = mat.toSparse
       (mat.newMatrix (RowMajor ())
           (map vec.fromList [[1,0,3],[4,5,0]]));
    imags = mat.toSparse
       (mat.newMatrix (ColumnMajor ())
           (map vec.fromList [[0,-1],[-2,-3],[0,0]]));
    m = cm.complex reals imags;
    e = cm.enumerate m;
    all = [
        { i = 0, j = 0, v = complex.complex 1 0 },
        { i = 0, j = 1, v = complex.complex 0 (-2) },
        { i = 0, j = 2, v = complex.complex 3 0 },
        { i = 1, j = 0, v = complex.complex 4 (-1) },
        { i = 1, j = 1, v = complex.complex 5 (-3) }
    ];
    sortEntries = 
        sortBy do a b:
            if a.i == b.i then a.j < b.j else a.i < b.i fi
        done;
    compare
       (sortEntries e)
       (sortEntries all);
),

"transposed": \(
    m = aTestMatrix ();
    mout = cm.transposed m;
    compare (map vec.list (mat.asRows (cm.real mout))) [[1,0],[0,4],[3.5,1]] and
    compare (map vec.list (mat.asRows (cm.imaginary mout))) [[0,0],[-2,-3],[6,-0.2]];
),

"conjugateTransposed": \(
    m = aTestMatrix ();
    mout = cm.conjugateTransposed m;
    compare (map vec.list (mat.asRows (cm.real mout))) [[1,0],[0,4],[3.5,1]] and
    compare (map vec.list (mat.asRows (cm.imaginary mout))) [[0,0],[2,3],[-6,0.2]];
),

"flipped": \(
    m = aTestMatrix ();
    mout = cm.flipped m;
    compare (map vec.list (mat.asRows (cm.real mout))) [[1,0,3.5],[0,4,1]] and
    compare (map vec.list (mat.asRows (cm.imaginary mout))) [[0,-2,6],[0,-3,-0.2]];
),

"magnitudes": \(
    // 1+0i 0-2i
    // 0+0i 4-3i
    reals = mat.newMatrix (RowMajor ()) (map vec.fromList [[1,0],[0,4]]);
    imags = mat.newMatrix (RowMajor ()) (map vec.fromList [[0,-2],[0,-3]]);
    m = cm.complex reals imags;
    mags = cm.magnitudes m;
    compare (map vec.list (mat.asRows mags)) [[1,2],[0,5]];
),

"magnitudes-real": \(
    reals = mat.newMatrix (RowMajor ()) (map vec.fromList [[1,0],[0,4]]);
    m = cm.fromReal reals;
    mags = cm.magnitudes m;
    compare (map vec.list (mat.asRows mags)) (map vec.list (mat.asRows reals));
),

"magnitudes-imag": \(
    reals = mat.newMatrix (RowMajor ()) (map vec.fromList [[1,0],[0,4]]);
    m = cm.fromImaginary reals;
    mags = cm.magnitudes m;
    compare (map vec.list (mat.asRows mags)) (map vec.list (mat.asRows reals));
),

"density": \(
    // 1+0i 0-2i
    // 0+0i 4-3i
    reals = mat.newMatrix (RowMajor ()) (map vec.fromList [[1,0],[0,4]]);
    imags = mat.newMatrix (RowMajor ()) (map vec.fromList [[0,-2],[0,-3]]);
    compare (cm.density (cm.complex reals imags)) 0.75 and
        compare (cm.nonZeroValues (cm.complex reals imags)) 3 and
        compare (cm.density (cm.fromReal reals)) 0.5 and
        compare (cm.nonZeroValues (cm.fromReal reals)) 2 and
        compare (cm.density (cm.fromImaginary imags)) 0.5 and
        compare (cm.nonZeroValues (cm.fromImaginary imags)) 2
),
 
"angles": \(
    // 1+0i 0-2i
    // 0+0i -4-4i
    reals = mat.newMatrix (RowMajor ()) (map vec.fromList [[1,0],[0,-4]]);
    imags = mat.newMatrix (RowMajor ()) (map vec.fromList [[0,-2],[0,-4]]);
    m = cm.complex reals imags;
    mags = cm.angles m;
    compare (map vec.list (mat.asRows mags)) [[0,-pi/2],[0,-3*pi/4]];
),

] is hash<string, () -> boolean>;

