
module yetilab.stream.syntheticstream;

ch = load yetilab.stream.channels;
vec = load yetilab.block.fvector;
block = load yetilab.block.block;

load yetilab.stream.streamtype;

generated sampleRate generator =
   (// generator takes sample number as arg, returns number in -1,+1 range
    var position = 0;
    {
        get position () = position,
        get channels () = 1, 
        get sampleRate () = sampleRate,
        get available () = Infinite (),
        get finished? () = false,
        read count = ch.deinterleaved 1
           (result = vec.zeros count;
            for [0..count-1] do i:
                result[i] := generator (position + i)
            done;
            position := position + count;
            block.block result),
        close = \(),
    });

sinusoid rate freq =
    generated rate (sin . (* (2 * pi * freq / rate)));

whiteNoise rate =
    generated rate \((Math#random() * 2.0) - 1.0);

silent rate =
    generated rate \0;

precalculated rate data =
   (n = block.length data;
    var position = 0;
    {
        get position () = position,
        get channels () = 1,
        get sampleRate () = rate,
        get available () = Known (n - position),
        get finished? () = not (n > position),
        read count = ch.deinterleaved 1
           (rc = min count (n - position);
            result = block.rangeOf position rc data;
            position := position + rc;
            result),
        close = \(),
    });

{
    generated, 
    precalculated, 
    sinusoid, 
    whiteNoise, 
    silent,
} as {
    generated is number -> (number -> number) -> stream, 
    precalculated is number -> 'a -> stream, //!!! 'a is block 
    sinusoid is number -> number -> stream, 
    whiteNoise is number -> stream,
    silent is number -> stream,
}



