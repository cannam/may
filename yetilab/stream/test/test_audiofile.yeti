
module yetilab.stream.test.test_audiofile;

af = load yetilab.stream.audiofile;
vec = load yetilab.vector.vector;
mat = load yetilab.matrix.matrix;

ref = load yetilab.stream.test.audiofile_reference;

{ compare, compareUsing } = load yetilab.test.test;

testfile name = "yetilab/test/data/\(name).wav";

float n is number -> number =
    // round number to float precision (for comparison with floats)
   (arr = new float[1];
    arr[0] := n;
    arr[0]);

readAll stream =
    case stream.available of
    Known n: stream.read n;
    _: failWith "Known-duration stream required";
    esac;

bitdepthComparator depth =
   (mult = fold do a _: a*2 done 1 [1..depth];
    // We compare at depth-1 rather than depth to avoid rounding problems
    mult = mult / 2;
    do a b:
        a' = int (a * mult);
        b' = int (b * mult);
        if a' == b' then true
        else 
            eprintln "bitdepthComparator: \(a) != \(b) at bitdepth \(depth) [\(a') != \(b')]";
            false;
        fi;
    done);

testReferenceFile rate channels bitdepth =
   (test = readAll (af.open (testfile "\(rate)-\(channels)-\(bitdepth)"));
    ref = readAll (ref.afReference rate channels);
    compareUsing (mat.equalUnder (bitdepthComparator bitdepth)) test ref);

[ 

"20samples-open": \(
    f = af.open (testfile "20samples");
    compare f.position 0 and
        compare f.channels 1 and
        compare f.sampleRate 44100 and
        compare f.available (Known 20) and
        compare f.finished? false and
        ( f.close () ; true )
),

"20samples-read": \(
    all id (map do opener:
        f = opener (testfile "20samples");
        first15 = f.read 15;
        last5 = f.read 10;
        compare (mat.size first15) { rows = 1, columns = 15 } and
            compare (mat.size last5) { rows = 1, columns = 5 } and
            compare (vec.list (mat.getRow 0 first15))
                [ float (32767/32768),0,0,0,0,0,0,0,0,0,0,0,0,0,0 ] and
            compare (vec.list (mat.getRow 0 last5)) [ 0,0,0,0,-1 ] and
            ( f.close () ; true )
        done [ af.open, af.openMono ]);
),

"8000-1-8": \(
    testReferenceFile 8000 1 8;
),

"44100-2-16": \(
    testReferenceFile 44100 2 16;
),

] is hash<string, () -> boolean>

