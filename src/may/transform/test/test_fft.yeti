
module may.transform.test.test_fft;

{ forward, inverse, realForward, realForwardMagnitude, realInverse, fftshift, ifftshift } = load may.transform.fft;
{ list, fromList, zeros } = load may.vector;
{ complex, magnitude, real, imaginary } = load may.complex;

{ compare } = load may.test.test;

testFFT orig reals imags =
   (out = realForward (length orig) (fromList orig);
    outmag = realForwardMagnitude (length orig) (fromList orig);
    back = realInverse (length orig) out;
    compare out (array (map2 complex reals imags)) and
        compare (list back) orig and
        compare (list outmag) (map2 do r i: magnitude (complex r i) done
                               reals imags)
    );

testFFTComplex rin iin rout iout =
   (cin = array (map2 complex rin iin);
    cout = forward (length cin) cin;
    back = inverse (length cin) cout;
    compare (map real cout) rout and
        compare (map imaginary cout) iout and
        compare back cin
    );

[

"dc": \(
    testFFT [1,1,1,1] [4,0,0] [0,0,0];
),

"sine": \(
    testFFT [0,1,0,-1] [0,0,0] [0,-2,0];
),

"cosine": \(
    testFFT [1,0,-1,0] [0,2,0] [0,0,0];
),

"sineCosine": \(
    testFFT [0.5,1,-0.5,-1] [0,1,0] [0,-2,0];
),

"nyquist": \(
    testFFT [1,-1,1,-1] [0,0,4] [0,0,0];
),

"dirac": \(
    testFFT [1,0,0,0] [1,1,1] [0,0,0] and
        testFFT [0,1,0,0] [1,0,-1] [0,-1,0] and
        testFFT [0,0,1,0] [1,-1,1] [0,0,0] and
        testFFT [0,0,0,1] [1,0,-1] [0,1,0];
),

"c_dc": \(
    testFFTComplex [1,1,1,1] [1,1,1,1] [4,0,0,0] [4,0,0,0];
),

"c_cosine": \(
    testFFTComplex [1,0,-1,0] [1,0,-1,0] [0,2,0,2] [0,2,0,2];
),

"c_sineCosine": \(
    testFFTComplex [1,0,-1,0] [0,1,0,-1] [0,4,0,0] [0,0,0,0];
),

"fftshift": \(
    compare ((list . fftshift . zeros) 0) [] and 
        compare ((list . fftshift . fromList) [1,2,3,4]) [3,4,1,2] and
        compare ((list . fftshift . fromList) [1,2,3,4,5]) [4,5,1,2,3]
),

"ifftshift": \(
    compare ((list . ifftshift . zeros) 0) [] and 
        compare ((list . ifftshift . fromList) [3,4,1,2]) [1,2,3,4] and
        compare ((list . ifftshift . fromList) [4,5,1,2,3]) [1,2,3,4,5]
),

] is hash<string, () -> boolean>;


