
module may.stream.channels;

vec = load may.vector;
mat = load may.matrix;

interleaved m =
    vec.zipped (mat.asRows m);

deinterleaved channels b =
    mat.newMatrix (RowMajor ()) (list (vec.unzipped channels b));

mixedDown m =  //!!!doc: average, not sum
   ({ columns, rows } = (mat.size m);
    if rows < 1 or columns < 1 then
        vec.zeros 0
    elif rows == 1 then
        mat.getRow 0 m
    else
        vec.divideBy rows (vec.add (mat.asRows m));
    fi);

mixedDownFromInterleaved channels b =
    if channels == 1 then
        b;
    else
        columns = ((vec.length b) / channels);
        v' = new double[columns];
        for [0..channels-1] do row:
            for [0..columns-1] do col:
                v'[col] := v'[col] + vec.at b (col * channels + row);
            done;
        done;
        vec.divideBy channels (vec.vector v');
    fi;

mixedFromInterleavedTo targetChannels channels b = 
    if targetChannels == channels then
        b;
    elif targetChannels == 1 then
        mixedDownFromInterleaved channels b;
    else
        columns = ((vec.length b) / channels);
        v' = new double[columns * targetChannels];
        for [0..targetChannels-1] do target:
            for [0..columns-1] do col:
                if target < channels then
                    v'[col * targetChannels + target] := 
                        vec.at b (col * channels + target);
                elif channels == 1 and target == 1 then
                    v'[col * targetChannels + target] := 
                        vec.at b (col * channels);
                fi
            done
        done;
        vec.vector v';
    fi;

mixedTo targetChannels m = 
    if targetChannels == mat.height m then   // n -> n: pass unmodified
        m
    elif targetChannels == 1 then            // n -> 1: mix down
        deinterleaved 1 (mixedDown m)
    elif mat.height m == 1 then              // 1 -> n: copy to all channels
        mat.newMatrix (RowMajor ()) (map \(mat.getRow 0 m) [1..targetChannels])
    else                                     // n -> m: truncate or add zeros
        mat.resizedTo { rows = targetChannels, columns = mat.width m } m
    fi;

mixedAndInterleavedTo targetChannels m = 
    if targetChannels == 1 then
        mixedDown m
    else
        interleaved (mixedTo targetChannels m);
    fi;

//!!! some of these names are terrible
{
    interleaved, deinterleaved,
    mixedDown, mixedDownFromInterleaved,
    mixedFromInterleavedTo, mixedTo, mixedAndInterleavedTo
}

