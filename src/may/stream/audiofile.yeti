
module may.stream.audiofile;

load may.stream.type;

import javax.sound.sampled:
     AudioSystem, AudioInputStream, AudioFormat, AudioFormat$Encoding,
     AudioFileFormat, AudioFileFormat$Type,
     TargetDataLine, LineListener, Line, Line$Info, Control, Control$Type,
     UnsupportedAudioFileException;

import java.io: File, IOException;

import java.nio: ByteBuffer, ByteOrder;

ch = load may.stream.channels;
vec = load may.vector;
mat = load may.matrix;

{ decode } = load may.stream.format;

readInterleaved' { format is ~AudioFormat, aistream is ~AudioInputStream } nframes =
   (channels = format#getChannels();
    bytesPerSample = format#getSampleSizeInBits() / 8;
    bytes = new byte[nframes * channels * bytesPerSample];
    bytesRead = aistream#read(bytes);
    if bytesRead <= 0 then vec.zeros 0;
    else
        n = int(bytesRead / bytesPerSample);
        doubles = new double[n];
        decode { format } bytes doubles n;
        vec.vector doubles;
    fi;
   );

read' { format is ~AudioFormat, aistream is ~AudioInputStream } n =
   (b = readInterleaved' { format, aistream } n;
    channels = format#getChannels();
    ch.deinterleaved channels b;
   );

readMono' { format is ~AudioFormat, aistream is ~AudioInputStream } n =
   (b = readInterleaved' { format, aistream } n;
    channels = format#getChannels();
    ch.deinterleaved 1 (ch.mixedDownFromInterleaved channels b);
   );

// Note, all this assumes aistream is non-blocking (i.e. available()
// is to the end of file). Our stream interface does support
// indefinite and infinite streams, but audiofile doesn't yet.

available' { format is ~AudioFormat, aistream is ~AudioInputStream } =
    aistream#available() / ((format#getSampleSizeInBits() / 8) * format#getChannels());

close' { aistream is ~AudioInputStream } =
    aistream#close();

openWithReader reader ch name is 'a -> number -> string -> stream_t =
   (f = new File(name);
    aistream = AudioSystem#getAudioInputStream(f);
    format = aistream#getFormat();
    len = available' { format, aistream }; // at start of stream
    syncd = synchronized aistream;
    {
        get position () = syncd \(len - available' { aistream, format }),
        get channels () = if ch == 0 then format#getChannels() else ch fi,
        get sampleRate () = format#getSampleRate(),
        get available () = syncd \(Known (available' { aistream, format })),
        get finished? () = syncd \(not (aistream#available() > 0)),
        read = syncd \(reader { aistream, format }),
        close () = syncd \(close' { aistream }),
    });

/**
 * Open the named audio file and return a stream object for
 * reading from it. May throw UnsupportedAudioFileException
 * or IOException.
 */
open = openWithReader read' 0;

/**
 * Open the named audio file and return a stream object that
 * reads mono samples from it, using
 * may.stream.channels.mixedDown to mix channels as necessary. 
 * May throw UnsupportedAudioFileException or IOException.
 */
openMono = openWithReader readMono' 1;

/**
 * Open an audio file with the given name and write all available
 * samples to it from the given stream, returning the number of
 * sample frames written. The stream must have finite length.
 * 
 * Example:
 * : str = audiofile.open "in.wav";
 * : n = audiofile.write str "out.wav";
 */
write str name is stream_t -> string -> number =
   (var tot = 0;
    case str.available of
    Infinite (): failWith "Cannot write infinite stream to file";
    _: ()
    esac;
    channels = str.channels;
    bitdepth = 16;
    class StreamAdapter extends TargetDataLine
        int read(byte[] bytes, int off, int len)
           (bb = ByteBuffer#wrap(bytes, off, len);
            bb#order(ByteOrder#LITTLE_ENDIAN);
            m = str.read (len / (channels * 2));
            tot := mat.width m;
            for [0..mat.width m - 1] do i:
                for [0..channels - 1] do c:
                    v = int (32767 * mat.at m c i);
                    v = if v < -32768 then -32768
                        elif v > 32767 then 32767
                        else v fi;
                    \() bb#putShort((i * channels + c) * 2, v);
                done
            done;
            channels * 2 * mat.width m),
        int available()
            case str.available of
            Known n: channels * n * 2;
            other: channels * 1024; //!!!???
            esac,
        AudioFormat getFormat()
            new AudioFormat(str.sampleRate, bitdepth, channels, true, false),
        void open(),
        void open(AudioFormat format),
        void open(AudioFormat format, int bufferSize),
        void close(),
        void drain(),
        void flush(),
        boolean isOpen() true,
        boolean isActive() true,
        boolean isRunning() true,
        int getFramePosition() str.position,
        long getLongFramePosition() str.position,
        long getMicrosecondPosition() 0,
        int getBufferSize() 0,
        float getLevel() 1.0,
        void start(),
        void stop(),
        void addLineListener(LineListener ll),
        void removeLineListener(LineListener ll),
        Control getControl(Control$Type c),
        Control[] getControls(),
        Line$Info getLineInfo(),
        boolean isControlSupported(Control$Type c) false,
    end;
    f = new File(name);
    n = AudioSystem#write(new AudioInputStream(new StreamAdapter()),
                          AudioFileFormat$Type#WAVE, f);
    str.close ();
//!!! no, the header size is included in the return value!
    n / (channels * bitdepth));

{
    open,
    openMono,
    write,
} as {
    open is string -> stream_t,
    openMono is string -> stream_t,
    write is stream_t -> string -> number,
} 

