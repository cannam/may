
module may.matrix.complex;

mat = load may.matrix;
vec = load may.vector;
cpx = load may.complex;

load may.matrix.type;
load may.matrix.complextype;
load may.complex.type;

complex real imaginary = //!!! or complex { .real, .imaginary } ?
   (size = mat.size real;
    if size != mat.size imaginary then
        failWith "Matrices are not the same size: \(size), \(mat.size imaginary)";
    else
        { size, real = Some real, imaginary = Some imaginary };
    fi);

size cm = 
    cm.size;

width cm =
    cm.size.columns;

height cm =
    cm.size.rows;

fromReal m =
    { size = mat.size m, real = Some m, imaginary = none };

fromImaginary m =
    { size = mat.size m, real = none, imaginary = Some m };

at cm row col =
   (partAt p row col =
        case p of
        Some m: mat.at m row col;
        none: 0 
        esac;
    cpx.complex (partAt cm.real row col) (partAt cm.imaginary row col));

maybe' lambda f = // like maybe but with lazy default
   \case of
    Some v: f v;
    None _: lambda ();
    esac;

getRow n cm = 
   (pget = maybe' \(vec.zeros cm.size.columns) (mat.getRow n);
    array (map2 cpx.complex (pget cm.real) (pget cm.imaginary)));

getColumn n cm = 
   (pget = maybe' \(vec.zeros cm.size.rows) (mat.getColumn n);
    array (map2 cpx.complex (pget cm.real) (pget cm.imaginary)));

getDiagonal k cm = 
   (ioff = if k < 0 then -k else 0 fi;
    joff = if k > 0 then  k else 0 fi;
    n = min (cm.size.columns - joff) (cm.size.rows - ioff);
    pget = maybe' \(vec.zeros n) (mat.getDiagonal k);
    cpx.complexArray (pget cm.real) (pget cm.imaginary));

asRows cm =
   (partAsRows p =
        case p of 
        Some m: mat.asRows m;
        none: map \(vec.zeros cm.size.columns) [1..cm.size.rows];
        esac;
    map2 cpx.complexArray (partAsRows cm.real) (partAsRows cm.imaginary));

asColumns cm =
   (partAsColumns p =
        case p of 
        Some m: mat.asColumns m;
        none: map \(vec.zeros cm.size.rows) [1..cm.size.columns];
        esac;
    map2 cpx.complexArray (partAsColumns cm.real) (partAsColumns cm.imaginary));

generate f size =
    //!!! doc: inefficient if function is not fast as it's called
    // twice for every cell (real & imag separately)
    {
        size,
        real = Some (mat.generate do row col: cpx.real (f row col) done size),
        imaginary = Some (mat.generate do row col: cpx.imaginary (f row col) done size),
    };

constMatrix c size =
    {
        size,
        real = Some (mat.constMatrix (cpx.real c) size),
        imaginary = Some (mat.constMatrix (cpx.imaginary c) size),
    };

zeroMatrix size =
    {
        size,
        real = none,
        imaginary = none
    };

rowSlice cm start end =
   (pget = maybe none (Some . do m: mat.rowSlice m start end done);
    {
        size = { rows = end - start, columns = cm.size.columns },
        real = pget cm.real,
        imaginary = pget cm.imaginary
    });

columnSlice cm start end =
   (pget = maybe none (Some . do m: mat.columnSlice m start end done);
    {
        size = { columns = end - start, rows = cm.size.rows },
        real = pget cm.real,
        imaginary = pget cm.imaginary
    });

equal cm1 cm2 =
    cm1.size == cm2.size and
        case cm1.real of
        Some m1:
            case cm2.real of
            Some m2: mat.equal m1 m2;
            None (): mat.equal m1 (mat.zeroMatrix cm1.size);
            esac;
        None ():
            case cm2.real of
            Some m2: mat.equal m2 (mat.zeroMatrix cm2.size);
            None (): true;
            esac;
        esac;

conjugateTransposed cm =
    {
        size = { rows = cm.size.columns, columns = cm.size.rows },
        real = maybe none (Some . mat.transposed) cm.real,
        imaginary = maybe none (Some . mat.negative . mat.transposed) cm.imaginary,
    };

transposed cm =
    {
        size = { rows = cm.size.columns, columns = cm.size.rows },
        real = maybe none (Some . mat.transposed) cm.real,
        imaginary = maybe none (Some . mat.transposed) cm.imaginary,
    };

flipped cm =
    {
        size = { rows = cm.size.columns, columns = cm.size.rows },
        real = maybe none (Some . mat.flipped) cm.real,
        imaginary = maybe none (Some . mat.flipped) cm.imaginary,
    };

toSparse cm =
   (ts = maybe none (Some . mat.toSparse);
    cm with { real = ts cm.real, imaginary = ts cm.imaginary });

toDense cm =
   (td = maybe none (Some . mat.toDense);
    cm with { real = td cm.real, imaginary = td cm.imaginary });

scaled factor cm =
   (sc = maybe none (Some . (mat.scaled factor));
    cm with { real = sc cm.real, imaginary = sc cm.imaginary });

real cm = maybe' \(mat.zeroMatrix cm.size) id cm.real;

imaginary cm = maybe' \(mat.zeroMatrix cm.size) id cm.imaginary;

magnitudes cm =
    mat.generate do row col:
        cpx.magnitude (at cm row col);
    done cm.size;

angles cm =
    mat.generate do row col:
        cpx.angle (at cm row col);
    done cm.size;

addParts p1 p2 =
    case p1 of
    Some m1:
        case p2 of
        Some m2: Some (mat.sum m1 m2);
        none: Some m1;
        esac;
    none:
        case p2 of
        Some m2: Some m2;
        none: none;
        esac;
    esac;

subtractParts p1 p2 =
    case p1 of
    Some m1:
        case p2 of
        Some m2: Some (mat.difference m1 m2);
        none: Some m1;
        esac;
    none:
        case p2 of
        Some m2: Some (mat.negative m2);
        none: none;
        esac;
    esac;

multiplyParts p1 p2 =
    case p1 of
    Some m1:
        case p2 of
        Some m2: Some (mat.product m1 m2);
        none: none;
        esac;
    none:
        none;
    esac;

sum c1 c2 =
   (a = c1.real;
    b = c1.imaginary;
    c = c2.real;
    d = c2.imaginary;
    {
        size = c1.size,
        real = addParts a c,
        imaginary = addParts b d,
    });

product c1 c2 =
   (a = c1.real;
    b = c1.imaginary;
    c = c2.real;
    d = c2.imaginary;
    {
        size = { rows = c1.size.rows, columns = c2.size.columns },
        real = subtractParts (multiplyParts a c) (multiplyParts b d),
        imaginary = addParts (multiplyParts b c) (multiplyParts a d);
    });

density cm =
    case cm.real of
    Some m1:
        case cm.imaginary of
        Some m2: (mat.density m1 + mat.density m2) / 2;
        none: mat.density m1;
        esac;
    none:
        case cm.imaginary of
        Some m2: mat.density m2;
        none: 0.0;
        esac;
    esac;

newComplexMatrix type data =
   (newPart f =
        mat.newMatrix type 
           (map do cc: vec.fromList (map f cc) done data);
    complex (newPart cpx.real) (newPart cpx.imaginary));

newComplexRowVector data =
   (newPart f = mat.newRowVector (vec.fromList (map f data));
    complex (newPart cpx.real) (newPart cpx.imaginary));

newComplexColumnVector data =
   (newPart f = mat.newColumnVector (vec.fromList (map f data));
    complex (newPart cpx.real) (newPart cpx.imaginary));

enumerate cm =
   (enhash h p proto ix =
       (e = maybe [] mat.enumerate p;
        for e do { i, j, v }:
            key = { i, j };
            if not key in h then h[key] := proto (); fi;
            h[key][ix] := v;
        done);
    h = [:];
    proto = \(array[0,0]);
    enhash h cm.real proto 0;
    enhash h cm.imaginary proto 1;
    sortBy
        do a b:
            if a.i == b.i then a.j < b.j else a.i < b.i fi
        done
           (map do k: k with { v = cpx.complex h[k][0] h[k][1] } done
               (keys h))
    );

{
    size,
    width,
    height,
    density,
    at,
    getColumn,
    getRow,
    getDiagonal,
    asRows,
    asColumns,
    generate,
    constMatrix,
    zeroMatrix,
    equal,
    conjugateTransposed,
    transposed,
    flipped,
    toSparse,
    toDense,
    scaled,
    sum,
    product,
    complex,
    fromReal,
    fromImaginary,
    real,
    imaginary,
    magnitudes,
    angles,
    rowSlice,
    columnSlice,
    newComplexMatrix,
    newComplexRowVector,
    newComplexColumnVector,
    enumerate,
} as {
    size is complexmatrix -> { .rows is number, .columns is number },
    width is complexmatrix -> number,
    height is complexmatrix -> number,
    density is complexmatrix -> number,
    at is complexmatrix -> number -> number -> cplx,
    getColumn is number -> complexmatrix -> array<cplx>,
    getRow is number -> complexmatrix -> array<cplx>,
    getDiagonal is number -> complexmatrix -> array<cplx>,
    asRows is complexmatrix -> list<array<cplx>>,
    asColumns is complexmatrix -> list<array<cplx>>,
    generate is (number -> number -> cplx) -> { .rows is number, .columns is number } -> complexmatrix,
    constMatrix is cplx -> { .rows is number, .columns is number } -> complexmatrix,
    zeroMatrix is { .rows is number, .columns is number } -> complexmatrix,
    equal is complexmatrix -> complexmatrix -> boolean,
    conjugateTransposed is complexmatrix -> complexmatrix,
    transposed is complexmatrix -> complexmatrix,
    flipped is complexmatrix -> complexmatrix,
    toSparse is complexmatrix -> complexmatrix,
    toDense is complexmatrix -> complexmatrix,
    scaled is number -> complexmatrix -> complexmatrix,
    sum is complexmatrix -> complexmatrix -> complexmatrix,
    difference is complexmatrix -> complexmatrix -> complexmatrix,
    abs is complexmatrix -> matrix,
    product is complexmatrix -> complexmatrix -> complexmatrix,
    entryWiseProduct is complexmatrix -> complexmatrix -> complexmatrix,
    complex is matrix -> matrix -> complexmatrix,
    fromReal is matrix -> complexmatrix,
    fromImaginary is matrix -> complexmatrix,
    real is complexmatrix -> matrix,
    imaginary is complexmatrix -> matrix,
    magnitudes is complexmatrix -> matrix,
    angles is complexmatrix -> matrix,
    rowSlice is complexmatrix -> number -> number -> complexmatrix,
    columnSlice is complexmatrix -> number -> number -> complexmatrix,
    newComplexMatrix is (ColumnMajor () | RowMajor ()) -> list?<list?<cplx>> -> complexmatrix,
    newComplexRowVector is list?<cplx> -> complexmatrix,
    newComplexColumnVector is list?<cplx> -> complexmatrix,
    enumerate is complexmatrix -> list<{ .i is number, .j is number, .v is cplx }>,
}

