
module may.transform.fft;

import edu.emory.mathcs.jtransforms.fft: DoubleFFT_1D;

vec = load may.vector;
complex = load may.complex;

packedToComplex len p is number -> ~double[] -> array<complex.complex_t> =
   (n = len / 2;
    array
       (map do i:
            re = if i == n then p[1] else p[i*2] fi;
            im = if i == 0 or i == n then 0 else p[i*2+1] fi;
            complex.complex re im;
        done [0..n]));

complexToPacked arr is array<complex.complex_t> -> ~double[] =
   (n = length arr;
    v = new double[n*2-2];
    for [0..(n-1)*2-1] do i:
        ix = int (i/2);
        v[i] :=
            if i == ix*2 then
                complex.real arr[ix]
            else 
                complex.imaginary arr[ix] 
            fi;
    done;
    v[1] := complex.real arr[n-1];
    v);

unpackedToComplex len unp is number -> vec.vector_t -> array<complex.complex_t> =
   (vv = vec.unzipped 2 unp;
    array (map2 complex.complex (vec.list vv[0]) (vec.list vv[1])));

complexToUnpacked cc is array<complex.complex_t> -> vec.vector_t =
    vec.zipped [ vec.fromList (map complex.real cc),
                vec.fromList (map complex.imaginary cc) ];

//!!! doc: n separately as below
forward n =
   (d = new DoubleFFT_1D(n);
    do cc:
        arr = vec.primitive (vec.resizedTo (n*2) (complexToUnpacked cc));
        d#complexForward(arr);
        unpackedToComplex n (vec.vector arr);
    done);

//!!! doc: n separately as below
inverse n =
   (d = new DoubleFFT_1D(n);
    do cc:
        arr = vec.primitive (vec.resizedTo (n*2) (complexToUnpacked cc));
        d#complexInverse(arr, true);
        unpackedToComplex n (vec.vector arr);
    done);

//!!! doc: n is supplied separately from the input vector to support partial evaluation
//!!! doc: output has n/2+1 complex values
//!!! doc: powers of two only? check with jtransforms
realForward n = 
   (d = new DoubleFFT_1D(n);
    do bl:
        arr = vec.primitive (vec.resizedTo n bl);
        d#realForward(arr);
        packedToComplex n arr;
    done);

//!!! doc: n separately as above
realForwardMagnitude n =
    complex.magnitudes . (realForward n);

//!!! doc: input requires n/2+1 complex values 
//!!! doc: powers of two only? check with jtransforms
//!!! this function fails if the input is the wrong length (and that is the right thing to do I think) but the other functions just resize it. Should they fail too?
realInverse n = 
   (d = new DoubleFFT_1D(n);
    do cplx:
        carr = array cplx;
        if length carr != 1 + int (n/2) then
            failWith "Complex-to-real inverse FFT of size \(n) expects \(1 + int (n/2)) complex values as input (DC to Nyquist only), not \(length carr) as supplied";
        fi;
        arr = complexToPacked carr;
        d#realInverse(arr, true);
        vec.vector arr;
    done);

fftshift v =
   (len = vec.length v;
    half = int(len/2 + 0.5); // round up for odd-length sequences
    vec.concat [vec.slice v half len, vec.slice v 0 half]);

ifftshift v =
   (len = vec.length v;
    half = int(len/2); // round down for odd-length sequences
    vec.concat [vec.slice v half len, vec.slice v 0 half]);

{
forward,
inverse,
realForward,
realForwardMagnitude,
realInverse,
fftshift,
ifftshift,
}

