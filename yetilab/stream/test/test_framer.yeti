
module yetilab.stream.test.test_framer;

fr = load yetilab.stream.framer;
vec = load yetilab.vector;
mat = load yetilab.matrix;
syn = load yetilab.stream.syntheticstream;

{ compare, compareUsing } = load yetilab.test.test;

rate = 10;

testStream n is number -> 'a  = syn.precalculated rate (vec.fromList [1..n]);

compareFrames frames1 frames2 =
    all id (map2 do f1 f2: compareUsing mat.equal f1 f2 done frames1
       (map (mat.newRowVector . vec.fromList) frames2));

testFramesWith params length expected firstChunkSize =
   (f = fr.frames params (testStream length);
    str = fr.streamed rate params f;
    sz = params.framesize;
    ts = testStream length;

    overlapping = params.framesize > params.hop;
    incomplete = overlapping and // Can't reconstruct with < 50% overlap
        params.framesize < params.hop * 2; 

    println "firstChunkSize = \(firstChunkSize):";

    firstChunk = str.read firstChunkSize;
    restChunk = str.read (length - firstChunkSize);

    compareFrames f expected and
       (incomplete or 
            compareUsing mat.equal
                firstChunk (ts.read firstChunkSize)) and
       (incomplete or 
            compareUsing mat.equal
                restChunk (ts.read (length - firstChunkSize))) and
        compare str.position length and
       (overlapping or // (overlapping streamer doesn't know when it'll end!)
           compare str.available (Known (sz - (length % sz)))));

testFrames params length expected =
    all id (map (testFramesWith params length expected) [1..length]);

[

"framecount-2x2": \( 
    fr = fr.frames { framesize = 2, hop = 2 } (testStream 2);
    compare (length fr) 1
),

"framecount-2x3": \( 
    fr = fr.frames { framesize = 2, hop = 2 } (testStream 3);
    compare (length fr) 2
),

"framecount-2x4": \( 
    fr = fr.frames { framesize = 2, hop = 2 } (testStream 4);
    compare (length fr) 2
),

"framecount-2.1x0": \( 
    fr = fr.frames { framesize = 2, hop = 1 } (testStream 0);
    compare (length fr) 1
),

"framecount-2.1x1": \( 
    fr = fr.frames { framesize = 2, hop = 1 } (testStream 1);
    compare (length fr) 2
),

"framecount-2.1x2": \( 
    fr = fr.frames { framesize = 2, hop = 1 } (testStream 2);
    compare (length fr) 3
),

"framecount-2.1x3": \( 
    fr = fr.frames { framesize = 2, hop = 1 } (testStream 3);
    compare (length fr) 4
),

"framecount-4.1x4": \( 
    fr = fr.frames { framesize = 4, hop = 1 } (testStream 4);
    compare (length fr) 7
),

"framecount-4.3x4": \( 
    fr = fr.frames { framesize = 4, hop = 3 } (testStream 4);
    compare (length fr) 2 
),

"framecount-4.4x4": \( 
    fr = fr.frames { framesize = 4, hop = 4 } (testStream 4);
    compare (length fr) 1
),

"framecount-3.2x4": \(
    fr = fr.frames { framesize = 3, hop = 2 } (testStream 4);
    compare (length fr) 3
),

"frames-2x5": \( 
    testFrames { framesize = 2, hop = 2 } 5 [ [1,2], [3,4], [5,0] ];
),

"frames-4.3x4": \( 
    testFrames { framesize = 4, hop = 3 } 4 [ [0,1,2,3], [3,4,0,0] ];
),

"frames-3.2x4": \(
    testFrames { framesize = 3, hop = 2 } 4 [ [0,1,2], [2,3,4], [4,0,0] ];
),

"frames-3.1x6": \(
    testFrames { framesize = 3, hop = 1 } 6
        [ [0,0,1], [0,1,2], [1,2,3], [2,3,4],
          [3,4,5], [4,5,6], [5,6,0], [6,0,0] ];
),

"frames-4.2x8": \(
    testFrames { framesize = 4, hop = 2 } 8
        [ [0,0,1,2], [1,2,3,4], [3,4,5,6], [5,6,7,8], [7,8,0,0] ];
),

"overlapAdd-3.1": \(
    compareUsing (mat.equal)
       (fr.overlapAdd 1 2 [ mat.newRowVector (vec.fromList [ 1,2,3 ]),
                            mat.newRowVector (vec.fromList [   4,5,6 ]),
                            mat.newRowVector (vec.fromList [     7,8,9 ]) ])
       (mat.newRowVector (vec.fromList [ 1,6,15,14,9 ]))
),

"overlapAdd-3.2": \(
    compareUsing (mat.equal)
       (fr.overlapAdd 1 1 [ mat.newRowVector (vec.fromList [ 1,2,3 ]),
                            mat.newRowVector (vec.fromList [     4,5,6 ]),
                            mat.newRowVector (vec.fromList [         7,8,9 ]) ])
       (mat.newRowVector (vec.fromList [ 1,2,7,5,13,8,9 ]))
),

"overlapAdd-4.2": \(
    compareUsing (mat.equal)
       (fr.overlapAdd 1 2 [ mat.newRowVector (vec.fromList [ 1,2,3,4 ]),
                            mat.newRowVector (vec.fromList [     5,6,7,8 ]),
                            mat.newRowVector (vec.fromList [         9,0,1,2 ]) ])
       (mat.newRowVector (vec.fromList [ 1,2,8,10,16,8,1,2 ]))
),

"overlapAdd-6+4.2": \( // Must work even if blocks vary in length (what if shorter than overlap though?)
    compareUsing (mat.equal)
       (fr.overlapAdd 1 2 [ mat.newRowVector (vec.fromList [ 1,2,3,4,5,6 ]),
                            mat.newRowVector (vec.fromList [         7,8,9,0 ]),
                            mat.newRowVector (vec.fromList [             1,2,3,4 ]) ])
       (mat.newRowVector (vec.fromList [ 1,2,3,4,12,14,10,2,3,4 ]))
),

] is hash<string, () -> boolean>;



