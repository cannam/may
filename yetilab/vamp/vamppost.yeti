module yetilab.vamp.vamppost;

mat = load yetilab.matrix.matrix;
bl = load yetilab.block.block;

fillOneSamplePerStep config features =
   (fill' n pending features =
        case pending of
        feature::rest:
            stamped = feature with
               { timestamp = Time ((n * config.stepSize) / config.sampleRate) };
            stamped :. \(fill' n rest features);
        _:
            if empty? features then []
            else fill' (n+1) (head features) (tail features);
            fi;
        esac;
    fill' (-1) [] features);

fillFixedSampleRate config rate features =
   (eps = 0.0001;
    fill' n pending features =
        case pending of
        feature::rest:
            n = case feature.timestamp of
                Untimed (): n + 1;
                Time t: int (t * rate + eps);
                esac;
            stamped = feature with { timestamp = Time (n / rate) };
            stamped :. \(fill' n rest features);
        _:
            if empty? features then []
            else fill' n (head features) (tail features);
            fi;
        esac;
    fill' (-1) [] features);

fillTimestamps { output, config, features } =
    case output.sampleType of
    OneSamplePerStep ():
        fillOneSamplePerStep config features;
    FixedSampleRate rate:
        fillFixedSampleRate config rate features;
    VariableSampleRate _:
        concat features;
    esac;

structureGrid binCount features =
    if empty? features then
        mat.zeroMatrix { rows = binCount, columns = 0 };
    else
        mat.newMatrix (ColumnMajor ())
           (map do f: list (bl.data f.values) done features);
    fi;

structure data =
   (type = data.output.inferredStructure;
    features =
        case type of
        Grid (): concat data.features;
        _: fillTimestamps data;
        esac;
    binCount = 
        case data.output.binCount of
        Fixed n: n;
        _: 0;
        esac;
    case type of
    Curve ():               // No duration, one value
        Curve features;
    Grid ():                // No duration, >1 value, not variable rate
        Grid (structureGrid binCount features);
    Instants ():            // Zero-valued features
        Instants features;
    Notes ():               // Duration, at least one value (pitch or freq)
        Notes features;
    Regions ():             // Duration, zero or more values
        Regions features;
    Segmentation ():        // No duration, one value, segment type in RDF
        Segmentation features;
    Unknown ():             // Other
        Unknown features;
    esac);

postprocess data =
    case data of
    OK data:
        structure data;
    Error e:
        Error e;
    esac;

{
fillTimestamps,
postprocess
}


