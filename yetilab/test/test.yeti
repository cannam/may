module yetilab.test.test;

vec = load yetilab.block.fvector;
ss = load yetilab.stream.syntheticstream;

import yeti.lang: FailureException;

testStream n is number -> 'a  = ss.precalculated 1000 (vec.vector [1..n]);

compareWith comparator obtained expected =
    if comparator obtained expected then
        true;
    else
        println "** expected: \(expected)\n   obtained: \(obtained)";
        false;
    fi;

compare obtained expected = compareWith (==) obtained expected;

select f = fold do r x: if f x then x::r else r fi done [];

failedTests testHash =
    select (!= "")
       (mapHash do name f:
            try
                if f () then "" else
                    println "Test \(name) failed";
                    name;
                fi 
            catch FailureException e:
                println "Test \(name) threw exception: \(e)";
                name;
            yrt;
        done testHash);
        
runTests group testHash =
   (failed = failedTests testHash;
    good = (length testHash - length failed);
    bad = length failed;
    println "\(group): \(good)/\(good+bad) tests passed";
    if not empty? failed then
        println "\(group): Failed tests [\(bad)]: \(strJoin ' ' failed)";
    fi;
    bad);

{
    testStream, compare, compareWith, failedTests, runTests
}

