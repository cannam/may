
module yetilab.block.block;

vec = load yetilab.block.fvector;

typedef opaque block = ~double[];

{
zeros = vec.zeros,
consts = vec.consts,
ones = vec.ones,
block v = v,
data b = b,
vector b = vec.copyOf b,
floats = vec.floats,
fromFloats ff = vec.fromFloats ff,
fromList l = vec.vector l,
list = vec.list,
length = vec.length,
equal = vec.equal,
copyOf = vec.copyOf,
rangeOf = vec.rangeOf,
resizedTo = vec.resizedTo,
concat = vec.concat,
} as {
zeros is number -> block,
consts is number -> number -> block,
ones is number -> block,
block is ~double[] -> block,
data is block -> ~double[],
vector is block -> ~double[],
floats is block -> ~float[],
fromFloats is ~float[] -> block,
fromList is list?<number> -> block,
list is block -> list<number>,
length is block -> number,
equal is block -> block -> boolean,
copyOf is block -> block,
rangeOf is block -> number -> number -> block,
resizedTo is number -> block -> block,
concat is list?<block> -> block,
}



