
module may.stream.syntheticstream;

ch = load may.stream.channels;
vec = load may.vector;
mat = load may.matrix;

load may.stream.type;

/**
 * Generate a stream using a generator function. The generator takes
 * a sample index and returns a number in the range -1,+1. The
 * generator is guaranteed to be called with sample indices in order
 * 0,1,2,... so it may maintain state between calls if desired.
 */   
generated sampleRate generator =
   (var position = 0;
    {
        get position () = position,
        get channels () = 1, 
        get sampleRate () = sampleRate,
        get available () = Infinite (),
        get finished? () = false,
        read count = ch.deinterleaved 1
           (result = new double[count];
            for [0..count-1] do i:
                result[i] := generator (position + i)
            done;
            position := position + count;
            vec.vector result),
        close = \(),
    });

sinusoid sampleRate freq =
    generated sampleRate (sin . (* (2 * pi * freq / sampleRate)));

varyingSinusoid sampleRate freqGenerator =
   (var phase = 0;
    generator i =
       (ifreq = freqGenerator i;
        result = sin phase;
        phase := phase + 2 * pi * ifreq / sampleRate;
        result);
    generated sampleRate generator);

whiteNoise sampleRate =
    generated sampleRate \((Math#random() * 2.0) - 1.0);

silent sampleRate =
    generated sampleRate \0;

precalculatedMono sampleRate data =
   (n = vec.length data;
    var position = 0;
    {
        get position () = position,
        get channels () = 1,
        get sampleRate () = sampleRate,
        get available () = Known (n - position),
        get finished? () = not (n > position),
        read count = ch.deinterleaved 1
           (rc = min count (n - position);
            result = vec.slice data position (position + rc);
            position := position + rc;
            result),
        close = \(),
    });

precalculated sampleRate data =
   (n = mat.width data;
    c = mat.height data;
    var position = 0;
    {
        get position () = position,
        get channels () = c,
        get sampleRate () = sampleRate,
        get available () = Known (n - position),
        get finished? () = not (n > position),
        read count = 
           (rc = min count (n - position);
            result = mat.columnSlice data position (position + rc);
            position := position + rc;
            result),
        close = \(),
    });

precalculatedRepeated sampleRate data =
   (n = mat.width data;
    c = mat.height data;
    chunks count pos =
        if count > 0 then
            ix = pos % n;
            rc = min count (n - ix);
            mat.columnSlice data ix (ix + rc) :.
              \(chunks (count - rc) (pos + rc));
        else
            []
        fi;
    var position = 0;
    {
        get position () = position,
        get channels () = c,
        get sampleRate () = sampleRate,
        get available () = Infinite (),
        get finished? () = false,
        read count = 
           (result = mat.concatHorizontal (chunks count position);
            position := position + count;
            result),
        close = \(),
    });

empty sampleRate channels = // degenerate stream with no data in it, occasionally useful
    {
        get position () = 0,
        get channels () = channels,
        get sampleRate () = sampleRate,
        get available () = Known 0,
        get finished? () = true,
        read count = mat.zeroMatrix { rows = channels, columns = 0 },
        close = \(),
    };

{
    generated is number -> (number -> number) -> stream_t, 
    precalculated is number -> mat.matrix_t -> stream_t,
    precalculatedMono is number -> vec.vector_t -> stream_t,
    precalculatedRepeated is number -> mat.matrix_t -> stream_t,
    sinusoid is number -> number -> stream_t, 
    varyingSinusoid is number -> (number -> number) -> stream_t,
    whiteNoise is number -> stream_t,
    silent is number -> stream_t,
    empty is number -> number -> stream_t,
}



