
module yetilab.stream.test.test_filter;

bl = load yetilab.block.block;
mat = load yetilab.matrix.matrix;
syn = load yetilab.stream.syntheticstream;
filt = load yetilab.stream.filter;

{ compare, compareUsing } = load yetilab.test.test;

makeTests name withUnknown =
   (withDuration n str =
        // Truncate a stream, but if withUnknown is true, return it
        // with availability Unknown -- so as to test that other
        // filter functions behave correctly even if availability is
        // not known on their underlying streams
       (ts = filt.withDuration n str;
        if withUnknown then
            ts with
            { 
                get available () = if ts.finished? then Known 0 else Unknown () fi;
            }
        else
            ts
        fi);
    maybeKnown n =
        if withUnknown then
            Unknown ()
        else
            Known n
        fi;
[

"truncatedTo-\(name)": \(
    // not using withDuration wrapper above, because we're actually
    // testing filt.withDuration here rather than just generating a
    // stream for use in another test
    str = filt.withDuration 3 (syn.generated 2 id);
    compare str.position 0 and
        compare str.channels 1 and
        compare str.sampleRate 2 and
        compare str.available (Known 3) and
        compare str.finished? false and
        compare (bl.list ((str.read 4).getRow 0)) [ 0,1,2 ] and
        compare str.position 3 and
        compare str.available (Known 0) and
        compare str.finished? true and
        ( str.close (); true )
),

"truncatedTo-b-\(name)": \(
    // as above
    str = filt.withDuration 3 (syn.generated 2 id);
    compare str.position 0 and
        compare (bl.list ((str.read 2).getRow 0)) [ 0,1 ] and
        compare str.position 2 and
        compare str.available (Known 1) and
        compare str.finished? false and
        compare (bl.list ((str.read 2).getRow 0)) [ 2 ] and
        compare str.position 3 and
        compare str.available (Known 0) and
        compare str.finished? true and
        ( str.close (); true )
),

"extendedTo-\(name)": \(
    // not using withDuration wrapper above for the outer call, because
    // we're actually testing filt.withDuration here rather than just
    // generating a stream for use in another test. The inner call
    // does use the wrapper.
    str = filt.withDuration 5 (withDuration 3 (syn.generated 2 id));
    compare str.position 0 and
        compare str.channels 1 and
        compare str.sampleRate 2 and
        compare str.available (Known 5) and
        compare str.finished? false and
        compare (bl.list ((str.read 4).getRow 0)) [ 0,1,2,0 ] and
        compare str.position 4 and
        compare str.available (Known 1) and
        compare str.finished? false and
        compare (bl.list ((str.read 2).getRow 0)) [ 0 ] and
        compare str.position 5 and
        compare str.available (Known 0) and
        compare str.finished? true and
        ( str.close (); true )
),

"delayedBy-0-3-\(name)": \(
    str = filt.delayedBy 0 (withDuration 3 (syn.generated 2 id));
    compare str.position 0 and
        compare str.channels 1 and
        compare str.sampleRate 2 and
        compare str.available (maybeKnown 3) and
        compare str.finished? false and
        compare (bl.list ((str.read 4).getRow 0)) [ 0,1,2 ] and
        compare str.position 3 and
        compare str.available (Known 0) and
        compare str.finished? true and
        ( str.close (); true )
),

"delayedBy-0-inf-\(name)": \(
    str = filt.delayedBy 0 (syn.generated 2 id);
    compare str.position 0 and
        compare str.channels 1 and
        compare str.sampleRate 2 and
        compare str.available (Infinite ()) and
        compare str.finished? false and
        compare (bl.list ((str.read 4).getRow 0)) [ 0,1,2,3 ] and
        compare str.position 4 and
        compare str.available (Infinite ()) and
        compare str.finished? false and
        ( str.close (); true )
),

"delayedBy-2-3-\(name)": \(
    str = filt.delayedBy 2 (withDuration 3 (syn.generated 2 id));
    compare str.position 0 and
        compare str.channels 1 and
        compare str.sampleRate 2 and
        compare str.available (maybeKnown 5) and
        compare str.finished? false and
        compare (bl.list ((str.read 4).getRow 0)) [ 0,0,0,1 ] and
        compare str.position 4 and
        compare str.available (maybeKnown 1) and
        compare str.finished? false and
        compare (bl.list ((str.read 4).getRow 0)) [ 2 ] and
        compare str.position 5 and
        compare str.available (Known 0) and
        compare str.finished? true and
        ( str.close (); true )
),

"delayedBy-2-3b-\(name)": \(
    str = filt.delayedBy 2 (withDuration 3 (syn.generated 2 id));
    compare str.position 0 and
        compare str.channels 1 and
        compare str.sampleRate 2 and
        compare str.available (maybeKnown 5) and
        compare str.finished? false and
        compare (bl.list ((str.read 1).getRow 0)) [ 0 ] and
        compare str.position 1 and
        compare str.available (maybeKnown 4) and
        compare str.finished? false and
        compare (bl.list ((str.read 4).getRow 0)) [ 0,0,1,2 ] and
        compare str.position 5 and
        compare str.available (Known 0) and
        compare str.finished? true and
        ( str.close (); true )
),

"delayedBy-2-3c-\(name)": \(
    str = filt.delayedBy 2 (withDuration 3 (syn.generated 2 id));
    compare str.position 0 and
        compare str.channels 1 and
        compare str.sampleRate 2 and
        compare str.available (maybeKnown 5) and
        compare str.finished? false and
        compare (bl.list ((str.read 7).getRow 0)) [ 0,0,0,1,2 ] and
        compare str.position 5 and
        compare str.available (Known 0) and
        compare str.finished? true and
        ( str.close (); true )
),

"delayedBy-2-inf-\(name)": \(
    str = filt.delayedBy 2 (syn.generated 2 id);
    compare str.position 0 and
        compare str.channels 1 and
        compare str.sampleRate 2 and
        compare str.available (Infinite ()) and
        compare str.finished? false and
        compare (bl.list ((str.read 2).getRow 0)) [ 0,0 ] and
        compare str.position 2 and
        compare str.finished? false and
        compare (bl.list ((str.read 2).getRow 0)) [ 0,1 ] and
        compare str.position 4 and
        compare str.finished? false and
        compare (bl.list ((str.read 2).getRow 0)) [ 2,3 ] and
        compare str.position 6 and
        compare str.finished? false and
        ( str.close (); true )
),

"multiplexed-inf-inf-\(name)": \(
    str = filt.multiplexed [syn.generated 2 id, syn.generated 2 (0-)];
    compare str.position 0 and
        compare str.channels 2 and
        compare str.sampleRate 2 and
        compare str.available (Infinite ()) and
        compare str.finished? false and
        compare (map bl.list (mat.asRows (str.read 4)))
            [[0,1,2,3], [0,-1,-2,-3]] and
        compare str.available (Infinite ()) and
        compare str.position 4 and
        ( str.close (); true )
),

"multiplexed-inf-trunc-\(name)": \(
    str = filt.multiplexed [syn.generated 2 id, withDuration 3 (syn.generated 2 (0-))];
    compare str.position 0 and
        compare str.channels 2 and
        compare str.sampleRate 2 and
        compare str.available (maybeKnown 3) and
        compare str.finished? false and
        compare (map bl.list (mat.asRows (str.read 4))) [[0,1,2], [0,-1,-2]] and
        compare str.available (Known 0) and
        compare str.finished? true and
        compare str.position 3 and
        ( str.close (); true )
),

"multiplexed-precalc-trunc-\(name)": \(
    str = filt.multiplexed
       [syn.precalculated 2 (bl.fromList [1,2]),
        withDuration 3 (syn.generated 2 (0-))];
    compare str.position 0 and
        compare str.channels 2 and
        compare str.sampleRate 2 and
        compare str.available (maybeKnown 2) and
        compare str.finished? false and
        compare (map bl.list (mat.asRows (str.read 4))) [[1,2], [0,-1]] and
        compare str.available (Known 0) and
        compare str.finished? true and
        compare str.position 2 and
        ( str.close (); true )
),

"multiplexed-2-1-\(name)": \(
    str = filt.multiplexed
       [syn.precalculated 2 (bl.fromList [1,2]),
        filt.multiplexed [syn.precalculated 2 (bl.fromList [3,4]),
                          withDuration 3 (syn.generated 2 (0-))]];
    compare str.position 0 and
        compare str.channels 3 and
        compare str.sampleRate 2 and
        compare str.available (maybeKnown 2) and
        compare str.finished? false and
        compare (map bl.list (mat.asRows (str.read 4))) [[1,2], [3,4], [0,-1]] and
        compare str.available (Known 0) and
        compare str.finished? true and
        compare str.position 2 and
        ( str.close (); true )
),

"multiplexed-2-1b-\(name)": \(
    str = filt.multiplexed
       [syn.precalculated 2 (bl.fromList [1,2]),
        syn.precalculated 2 (bl.fromList [3,4]),
        withDuration 3 (syn.generated 2 (0-))];
    compare str.position 0 and
        compare str.channels 3 and
        compare str.sampleRate 2 and
        compare str.available (maybeKnown 2) and
        compare str.finished? false and
        compare (map bl.list (mat.asRows (str.read 4))) [[1,2], [3,4], [0,-1]] and
        compare str.available (Known 0) and
        compare str.finished? true and
        compare str.position 2 and
        ( str.close (); true )
),

"repeated-2-\(name)": \(
    str = filt.repeated
       (syn.precalculated 2 (bl.fromList [1,2,3]));
    compare str.position 0 and
        compare str.channels 1 and
        compare str.sampleRate 2 and
        compare str.available (Infinite ()) and
        compare str.finished? false and
        compare (map bl.list (mat.asRows (str.read 1))) [[1]] and
        compare str.position 1 and
        compare (map bl.list (mat.asRows (str.read 2))) [[2,3]] and
        compare str.position 3 and
        compare (map bl.list (mat.asRows (str.read 3))) [[1,2,3]] and
        compare str.position 6 and
        compare (map bl.list (mat.asRows (str.read 5))) [[1,2,3,1,2]] and
        compare (map bl.list (mat.asRows (str.read 9))) [[3,1,2,3,1,2,3,1,2]] and
        compare (map bl.list (mat.asRows (str.read 2))) [[3,1]] and
        compare str.available (Infinite ()) and
        compare str.finished? false and
        compare str.position 22 and
        ( str.close (); true )
),

//!!! still no tests for filters with multi-channel inputs

]);

knowns = makeTests "known" false;
unknowns = makeTests "unknown" true;

all = [:];
for [ knowns, unknowns ] do h: for (keys h) do k: all[k] := h[k] done done;

all is hash<string, () -> boolean>;

