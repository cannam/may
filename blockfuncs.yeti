
module blockfuncs;

b = load block;
vec = load fvector;

sum' =
    sum . b.list;

mean bl =
    case b.length bl of
        0: 0;
        len: sum' bl / len
    esac;

multiply b1 b2 =
   (v1 = b.unblock b1;
    v2 = b.unblock b2;
    len = min (vec.length v1) (vec.length v2);
    v = vec.zeros len;
    for [0..len-1] do i: v[i] := v1[i] * v2[i] done;
    b.block v);

sqr bl =
    multiply bl bl;

rms =
    sqrt . mean . sqr;

sqrt' =
    b.fromList . (map sqrt) . b.list;

fftshift bl =
   (len = b.length bl;
    half = int(len/2 + 0.5); // round up for odd-length sequences
    b.concat [b.rangeOf bl half (len-half), b.rangeOf bl 0 half]);

ifftshift bl =
   (len = b.length bl;
    half = int(len/2); // round down for odd-length sequences
    b.concat [b.rangeOf bl half (len-half), b.rangeOf bl 0 half]);

{
sum = sum',
mean,
multiply, sqr,
sqrt = sqrt',
rms,
fftshift,
ifftshift,
}


        
