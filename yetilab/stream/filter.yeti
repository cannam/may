
module yetilab.stream.filter;

mat = load yetilab.matrix.matrix;
bl = load yetilab.block.block;

load yetilab.stream.streamtype;

minDurationOf d1 d2 =
    case d1 of 
    Known a:
        case d2 of 
        Known b: Known (min a b);
        Unknown (): Unknown ();
        Infinite (): Known a;
        esac;
    Unknown ():
        case d2 of 
        Known b: Known b;
        Unknown (): Unknown ();
        Infinite (): Unknown ();
        esac;
    Infinite ():
        d2;
    esac;

truncatedTo nsamples s = //!!! should nsamples be a time in seconds?
    {
        get position () = s.position,
        get channels () = s.channels, 
        get sampleRate () = s.sampleRate,
        get available () = Known (nsamples - s.position),
        get finished? () = not (nsamples > s.position),
        read count =
            if nsamples > s.position + count then
                s.read count;
            elif nsamples > s.position then
                s.read (nsamples - s.position)
            else
                mat.zeroMatrix { columns = 0, rows = s.channels }
            fi,
        close = s.close,
    };

delayedBy nsamples s = //!!! should nsamples be a time in seconds?
   (var prepos = 0;
    delay = nsamples;
    zeros n = mat.toRowMajor
       (prepos := prepos + n;
        mat.zeroMatrix { rows = s.channels, columns = n });
    {
        get position () = 
            if prepos < delay then prepos else s.position + delay fi,
        get channels () = s.channels,
        get sampleRate () = s.sampleRate,
        get available () = 
            case s.available of 
            Known a: Known (a + delay - prepos); 
            other: other 
            esac,
        get finished? () = (prepos >= delay) and s.finished?,
        read count =
            if prepos >= delay then s.read count
            elif prepos + count < delay then zeros count
            else
                nleft = delay - prepos;
                left = zeros nleft;
                right = s.read (count - nleft);
                mat.concat (Horizontal ()) [left, right];
            fi,
        close = s.close
    });

multiplexed streams = 
    {
        get position () = head (sort (map (.position) streams)), // can differ after EOS
        get channels () = sum (map (.channels) streams),
        get sampleRate () = (head streams).sampleRate,
        get available () = 
            fold do dur s: minDurationOf dur s.available done (Infinite ()) streams,
        get finished? () = any id (map (.finished?) streams),
        read count =
           (outs = map do s: s.read count done streams;
            minlen = head (sort (map do m: m.size.columns done outs));
            outs = map do m:
                mat.resizedTo { rows = m.size.rows, columns = minlen } m
                done outs;
            mat.concat (Vertical ()) outs
            ),
        close () = for streams do s: s.close() done,
    };

{
    truncatedTo, 
    delayedBy,
    multiplexed,
//!!!} as {
//    truncatedTo is number -> stream -> stream
}




