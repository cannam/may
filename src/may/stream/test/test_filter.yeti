
module may.stream.test.test_filter;

vec = load may.vector;
mat = load may.matrix;
cplx = load may.complex;
fft = load may.transform.fft;
syn = load may.stream.syntheticstream;
filt = load may.stream.filter;

//pl = load may.plot;//!!!

pl = { plot things = true; };

{ compare, compareUsing, assert } = load may.test.test;

logSpectrumFrom output n =
   (outdata = mat.getRow 0 (output.read n);
    spectrum = cplx.magnitudes (fft.realForward n outdata);
    array (map do v: 20 * Math#log10(v) done (vec.list spectrum)));

makeDiracStream rate n =
    syn.generated rate do x: if x == int(n/2) then 1 else 0 fi done;

[

"lowpassed-dirac": \(
    test { rate, cutoff, attenuation, bandwidth, n } = 
       (input = makeDiracStream rate n;
        output = filt.lowpassed cutoff attenuation bandwidth input;
        logspec = logSpectrumFrom output n;
        acceptances = map do bin:
            freq = (rate / n) * bin;
            db = logspec[bin];
            //!!! what should these 0.01 actually be?
            if freq < cutoff - bandwidth/2 then (db < 0.01 and db > -0.01)
            elif freq > cutoff + bandwidth/2 then (db < -attenuation)
            else (db < 0.01 and db > -attenuation)
            fi;
        done [0..n/2];
        compare acceptances (map \true [0..n/2]));
    all id 
       (map test [
            { rate = 800, cutoff = 200, attenuation = 80, bandwidth = 10, n = 1000 },
        ]);
),

"highpassed-dirac": \(
    test { rate, cutoff, attenuation, bandwidth, n } = 
       (input = makeDiracStream rate n;
        output = filt.highpassed cutoff attenuation bandwidth input;
        logspec = logSpectrumFrom output n;
        acceptances = map do bin:
            freq = (rate / n) * bin;
            db = logspec[bin];
            //!!! what should these 0.01 actually be?
            if freq > cutoff + bandwidth/2 then (db < 0.01 and db > -0.01)
            elif freq < cutoff - bandwidth/2 then (db < -attenuation)
            else (db < 0.01 and db > -attenuation)
            fi;
        done [0..n/2];
        compare acceptances (map \true [0..n/2]));
    all id 
       (map test [
            { rate = 800, cutoff = 200, attenuation = 80, bandwidth = 10, n = 1000 },
        ]);
),

"bandpassed-dirac": \(
    test { rate, f0, f1, attenuation, bandwidth, n } = 
       (input = makeDiracStream rate n;
        output = filt.bandpassed f0 f1 attenuation bandwidth input;
        logspec = logSpectrumFrom output n;
        acceptances = map do bin:
            freq = (rate / n) * bin;
            db = logspec[bin];
            //!!! what should these 0.01 actually be?
            if freq < f0 - bandwidth/2 then (db < -attenuation)
            elif freq < f0 + bandwidth/2 then (db < 0.01 and db > -attenuation)
            elif freq < f1 - bandwidth/2 then (db < 0.01 and db > -0.01)
            elif freq < f1 + bandwidth/2 then (db < 0.01 and db > -attenuation)
            else (db < -attenuation)
            fi;
        done [0..n/2];
        compare acceptances (map \true [0..n/2]));
    all id 
       (map test [
            { rate = 800, f0 = 200, f1 = 300, attenuation = 80, bandwidth = 10, n = 1000 },
        ]);
),

] is hash<string, () -> boolean>;

