
module may.stream.test.test_channels;

ch = load may.stream.channels;
mat = load may.matrix;
vec = load may.vector;

{ compare, compareUsing } = load may.test.test;

newMatrix data = mat.newMatrix (ColumnMajor ()) (map vec.fromList data);

compareBlocks b1 b2 =
    compare (vec.list b1) (vec.list b2);

[

"interleaved": \(
    compareBlocks (ch.interleaved (newMatrix [[1,4],[2,5],[3,6]]))
       (vec.fromList [1,4,2,5,3,6]) and
        compareBlocks (ch.interleaved (newMatrix [[1],[2],[3]]))
           (vec.fromList [1,2,3])
),

"deinterleaved": \(
    compareUsing mat.equal (ch.deinterleaved 2 (vec.fromList [1,4,2,5,3,6]))
       (newMatrix [[1,4],[2,5],[3,6]]) and
        compareUsing mat.equal (ch.deinterleaved 1 (vec.fromList [1,2,3]))
           (newMatrix [[1],[2],[3]])
),

"mixedDown": \(
    compareBlocks (ch.mixedDown (newMatrix [[1,4],[2,5],[3,6]]))
       (vec.fromList [5/2,7/2,9/2]) and
        compareBlocks (ch.mixedDown (newMatrix []))
           (vec.fromList [])
),

"mixedDownFromInterleaved": \(
    compareBlocks (ch.mixedDownFromInterleaved 2 (vec.fromList [1,4,2,5,3,6]))
       (vec.fromList [5/2,7/2,9/2]) and
        compareBlocks (ch.mixedDownFromInterleaved 1 (vec.fromList [1,2,3]))
           (vec.fromList [1,2,3])
),

"mixedFromInterleavedTo": \(
    compareBlocks (ch.mixedFromInterleavedTo 1 2 (vec.fromList [1,4,2,5,3,6]))
       (vec.fromList [5/2,7/2,9/2]) and
        compareBlocks (ch.mixedFromInterleavedTo 2 2 (vec.fromList [1,4,2,5,3,6]))
           (vec.fromList [1,4,2,5,3,6]) and
        compareBlocks (ch.mixedFromInterleavedTo 3 2 (vec.fromList [1,4,2,5,3,6]))
           (vec.fromList [1,4,0,2,5,0,3,6,0]) and
        compareBlocks (ch.mixedFromInterleavedTo 1 1 (vec.fromList [1,2,3]))
           (vec.fromList [1,2,3]) and
        compareBlocks (ch.mixedFromInterleavedTo 2 1 (vec.fromList [1,2,3]))
           (vec.fromList [1,1,2,2,3,3]) and
        compareBlocks (ch.mixedFromInterleavedTo 3 1 (vec.fromList [1,2,3]))
           (vec.fromList [1,1,0,2,2,0,3,3,0])
),

"mixedAndInterleavedTo": \(
    compareBlocks (ch.mixedAndInterleavedTo 1 (newMatrix [[1,4],[2,5],[3,6]]))
       (vec.fromList [5/2,7/2,9/2]) and
        compareBlocks (ch.mixedAndInterleavedTo 2 (newMatrix [[1,4],[2,5],[3,6]]))
           (vec.fromList [1,4,2,5,3,6]) and
        compareBlocks (ch.mixedAndInterleavedTo 3 (newMatrix [[1,4],[2,5],[3,6]]))
           (vec.fromList [1,4,0,2,5,0,3,6,0]) and
        compareBlocks (ch.mixedAndInterleavedTo 1 (newMatrix [[1],[2],[3]]))
           (vec.fromList [1,2,3]) and
        compareBlocks (ch.mixedAndInterleavedTo 2 (newMatrix [[1],[2],[3]]))
           (vec.fromList [1,1,2,2,3,3]) and
        compareBlocks (ch.mixedAndInterleavedTo 3 (newMatrix [[1],[2],[3]]))
           (vec.fromList [1,1,1,2,2,2,3,3,3])
),

] is hash<string, () -> boolean>;


