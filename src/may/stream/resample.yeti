
module may.stream.resample;

mat = load may.matrix;
vec = load may.vector;
win = load may.signal.window;
manip = load may.stream.manipulate;
convolve = load may.stream.convolve;
maths = load may.mathmisc;

load may.stream.type;

//!!! todo: synchronized for everything with state assignment

/**
 * Produce a sinc window with n samples from peak to first zero
 * crossing, multiplied by a Kaiser window with attenuation alpha dB
 * and transition bandwidth Hz at the given sampleRate. The filter
 * will contain an odd number of samples.
 */
kaiserSincFilterFor { n, attenuation, bandwidth, samplerate } =
   (pp = win.kaiserParameters (ByFrequency { attenuation, bandwidth, samplerate });
    length = if pp.length % 2 == 0 then pp.length + 1 else pp.length fi;
    maxlength = 200001;
    length = if length > maxlength then maxlength else length fi;
    kw = win.kaiser (pp with { length });
    sw = win.sinc (n*2) length;
    vec.multiply sw kw);

durationAdjusterFor factor s =
    case s.available of
    Known n: manip.withDuration (int (n * factor));
    _: id;
    esac;

//!!!doc: Resampled streams only have accurate duration when their inputs
// have known duration (otherwise they may be rounded up to the
// processing block size).
   
interpolated factor s = //!!! factor must be an integer [how to enforce this??]
    if factor == 1 then s
    else
        adjuster = durationAdjusterFor factor s;
        fparams = { 
            n = factor,
            attenuation = 80,
            bandwidth = 0.02,
            samplerate = 2,
        };
        filter = kaiserSincFilterFor fparams;
        delay = -(int ((vec.length filter) / 2));
        out = adjuster
           (manip.delayedBy delay
               (convolve.convolvedWith [Framesize 1024]
                   (mat.newMatrix (RowMajor ()) (map \filter [1..s.channels]))
                   (manip.spaced factor s)));
        out with { get sampleRate () = s.sampleRate * factor };
    fi;

//!!!doc: Resampled streams only have accurate duration when their inputs
// have known duration (otherwise they may be rounded up to the
// processing block size).

decimated factor s = //!!! factor must be an integer [how to enforce this??]
    if factor == 1 then s
    else
        adjuster = durationAdjusterFor (1/factor) s;
        bandwidth = 0.02;
        fparams = {
            n = factor, //!!! / (1 - bandwidth/2),
            attenuation = 80,
            bandwidth,
            samplerate = 1,
        };
        filter = kaiserSincFilterFor fparams;
        filtered =
           (convolve.convolvedWith [Framesize 1024]
               (mat.newMatrix (RowMajor ()) (map \filter [1..s.channels])) s);
        delay = -(int ((vec.length filter) / 4));
        scaleFactor = 1 / fparams.n;
        out = adjuster
           (manip.scaledBy scaleFactor
               (manip.delayedBy delay
                   (manip.picked factor filtered)));
        out with { get sampleRate () = s.sampleRate / factor };
    fi;

/**
 * Resample a stream to the given target rate, using separate successive
 * interpolation and decimation processes. This should give the same 
 * results as resampledDirectlyTo, but in most cases should be slower.
 */
resampledUpDownTo targetRate s =
   (g = maths.gcd targetRate s.sampleRate;
    decimated (s.sampleRate / g) (interpolated (targetRate / g) s));

/**
 * Resample a stream to the given target rate, by applying a single
 * resampling filter directly.
 */
resampledDirectlyTo targetRate s =
   (
    // We need a low-pass filter that will cut off just below the
    // Nyquist frequency at the lower of the two sample rates. This
    // filter needs to be sampled at a sufficient resolution that we
    // can get values from it at every sample point in the source rate
    // and in the target.

    sourceRate = s.sampleRate;
    higher = max sourceRate targetRate;
    lower = min sourceRate targetRate;
    g = maths.gcd higher lower;

    // Example: ratio of 3:4 in sample periods, corresponding to
    // e.g. resampling from 48kHz to 36kHz. The lower rate has the
    // longer sample period. We need a filter with n=4 values from
    // peak to first pole -- this is the longer sample period relative
    // to the shorter and is obtained by dividing the *higher* rate by
    // the gcd (because the ratio of sample periods is the reciprocal
    // of the ratio of sample rates).

    peakToPole = higher / g; // would be 4 in the above example

    // Our filter is a sinc function with peak-to-pole length
    // peakToPole, multiplied by a Kaiser window of transition
    // bandwidth narrow enough at the effective sample rate n to
    // exclude... what?

    fparams = 
        if targetRate >= sourceRate then
            // upsampling: filter is for interpolation, should be at
            // exactly the source rate's nyquist frequency
            {
                n = peakToPole,
                attenuation = 100,
                bandwidth = 0.02,
                samplerate = (higher / g),
            }
        else
            // downsampling: filter is for antialiasing, should be
            // slightly lower (depending on the bandwidth)
            bandwidth = 0.02;
            {
                n = peakToPole / (1 - bandwidth/2),
                attenuation = 100,
                bandwidth,
                samplerate = (higher / g),
            }
        fi;

//    println "for target rate \(targetRate) and source rate \(sourceRate), gcd = \(g) and peakToPole = \(peakToPole), filt parameters \(fparams)";

    filt = kaiserSincFilterFor fparams;

//    println "resulting filter length \(vec.length filt)";

    // Now we have a filter of (odd) length flen in which the lower
    // sample rate corresponds to every n'th point and the higher rate
    // to every m'th where n and m are higher and lower rates divided
    // by their gcd respectively. So if x coordinates are on the same
    // scale as our filter resolution, then source sample i is at i *
    // (targetRate / gcd) and target sample j is at j * (sourceRate /
    // gcd).

    // To reconstruct a single target sample, we want a buffer (real
    // or virtual) of flen values formed of source samples spaced at
    // intervals of (targetRate / gcd), in our example case 3.  This
    // is initially formed with the first sample at the filter peak.
    //
    // 0  0  0  0  a  0  0  b  0
    //
    // and of course we have our filter
    //
    // f1 f2 f3 f4 f5 f6 f7 f8 f9
    //
    // We take the sum of products of non-zero values from this buffer
    // with corresponding values in the filter
    //
    // a * f5 + b * f8
    //
    // Then we drop (sourceRate / gcd) values, in our example case 4,
    // from the start of the buffer and fill until it has flen values
    // again
    //
    // a  0  0  b  0  0  c  0  0
    //
    // repeat to reconstruct the next target sample
    //
    // a * f1 + b * f4 + c * f7
    //
    // and so on.
    //
    // Above I said the buffer could be "real or virtual" -- ours is
    // virtual. We don't actually store all the zero spacing values,
    // except for padding at the start; normally we store only the
    // values that actually came from the source stream, along with a
    // phase value that tells us how many virtual zeroes there are at
    // the start of the virtual buffer.  So the two examples above are
    //
    // 0 a b  [ with phase 1 ]
    // a b c  [ with phase 0 ]
    //
    // Having thus broken down the buffer so that only the elements we
    // need to multiply are present, we can also unzip the filter into
    // every-nth-element subsets at each phase, allowing us to do the
    // filter multiplication as a simply vector multiply. That is, rather
    // than store
    //
    // f1 f2 f3 f4 f5 f6 f7 f8 f9
    // 
    // we store separately
    //
    // f1 f4 f7
    // f2 f5 f8
    // f3 f6 f9
    //
    // Each time we complete a multiply-and-sum, we need to work out
    // how many (real) samples to drop from the start of our buffer,
    // and how many to add at the end of it for the next multiply.  We
    // know we want to drop enough real samples to move along by one
    // computed output sample, which is our outputSpacing number of
    // virtual buffer samples. Depending on the relationship between
    // input and output spacings, this may mean dropping several real
    // samples, one real sample, or none at all (and simply moving to
    // a different "phase").

    // Get this before we do anything else with s -- we're just
    // retrieving it in order to distinguish between known-duration
    // and unknown-duration streams
    initialAvailable = s.available;

    var remaining = 
        case initialAvailable of
        Known n: int ((n * targetRate) / sourceRate + 0.5);
        other: 0;
        esac;

    flen = vec.length filt;
    halflen = int (flen/2); // actual filter length is halflen + halflen + 1

    inputSpacing = targetRate / g;
    outputSpacing = sourceRate / g;

    phaseData = array
       (map do phase:

        // This maps phase onto the filter subset for that phase, the
        // next phase number (based on input and output spacings), and
        // the number of elements to be dropped and refilled in the
        // data buffer. Since these are all fixed per phase, we might
        // as well precalculate.

        // I'm sure the sums for drop, take, nextPhase could be simpler.

        var nextPhase = (phase - outputSpacing);
        nextPhase < 0 loop nextPhase := nextPhase + inputSpacing;
        nextPhase := nextPhase % inputSpacing;

        filtZipLength = maths.ceil ((flen - phase) / inputSpacing);

        {
            nextPhase,
            filter = vec.fromList
               (map do i: vec.at filt (i * inputSpacing + phase) done
                    [0 .. filtZipLength-1]),
            drop = maths.ceil ((max 0 (outputSpacing - phase)) / inputSpacing),
            take = int ((outputSpacing + ((flen - 1 - phase) % inputSpacing))
                        / inputSpacing),
        };

        done [0..inputSpacing-1]);

    var phase = halflen % inputSpacing;
    
    var buffer = mat.toRowMajor
       (mat.concatHorizontal
           [mat.zeroMatrix { 
                rows = s.channels,
                columns = int (halflen / inputSpacing)
            },
            s.read (maths.ceil ((halflen + 1) / inputSpacing))
            ]);

    var pos = 0;

    expired? () = 
        case initialAvailable of
        Known _: remaining <= 0;
        _: (inputSpacing * mat.width buffer + phase) <= halflen;
        esac;

    fill rowdata n is array<~double[]> -> number -> number =
        fold do count i: 
            if expired? () then
                count
            else
                pd = phaseData[phase];

                for [0..s.channels-1] do ch:
                    rowdata[ch][i] := vec.sum
                       (vec.multiply (mat.getRow ch buffer) pd.filter);
                done;
            
                buffer := mat.concatHorizontal
                   [mat.columnSlice buffer pd.drop (mat.width buffer),
                    s.read pd.take];

                phase := pd.nextPhase;

                remaining := if remaining > 0 then remaining - 1 else 0 fi;
                pos := pos + 1;

                count + 1;
            fi
        done 0 [0..n-1];
    
    s with
    {
        get sampleRate () = targetRate,
        get position () = pos,
        get available () = 
            case initialAvailable of
            Known n: Known remaining;
            other: other;
            esac,
        get finished? () = expired? (),
        read n = 
           (rowdata = array (map \(new double[n]) [1..s.channels]);
            obtained = fill rowdata n;
            scaleFactor = (targetRate / g) / fparams.n;
            result = mat.newMatrix (RowMajor ())
               (map do r: vec.scaled scaleFactor (vec.vector r) done rowdata);
            if obtained < n then mat.columnSlice result 0 obtained
            else result
            fi)
    });

resampledTo = resampledDirectlyTo;

{
    kaiserSincFilterFor,
    interpolated, decimated,
    resampledUpDownTo, resampledDirectlyTo,
    resampledTo
}

