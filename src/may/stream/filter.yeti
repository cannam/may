
module may.stream.filter;

mat = load may.matrix;
vec = load may.vector;
win = load may.signal.window;
convolve = load may.stream.convolve;
manip = load may.stream.manipulate;

//!!! todo: synchronized for everything with state assignment

bandpassed f0 f1 attenuation bandwidth s =
   (rate = s.sampleRate;
    kw = win.kaiserForBandwidth attenuation bandwidth rate;
    filterLength = vec.length kw;
    // First arg to sinc is the complete cycle length for the cutoff frequency
    idealFor freq =
        vec.scaled (2 * freq / rate)
           (win.sinc (rate / freq) filterLength);
    idealBandpass =
         if f1 < rate/2 then
             if f0 > 0 then vec.subtract (idealFor f1) (idealFor f0)
             else idealFor f1
             fi
         else
             if f0 > 0 then vec.subtract (win.dirac filterLength) (idealFor f0)
             else win.dirac filterLength;
             fi;
         fi;
    filter = vec.multiply [idealBandpass, kw];
    filtered = convolve.convolvedWith [Framesize 1024]
       (mat.fromRows (map \filter [1..s.channels]))
        s;
    manip.delayedBy (- (int (filterLength / 2))) filtered);

lowpassed f attenuation bandwidth s = 
    bandpassed 0 f attenuation bandwidth s;

highpassed f attenuation bandwidth s = 
    bandpassed f (s.sampleRate/2) attenuation bandwidth s;

{
    lowpassed, bandpassed, highpassed,
}

