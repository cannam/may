
module test.test;

vec = load fvector;
ss = load syntheticstream;

testStream n is number -> 'a  = ss.precalculated 1000 (vec.vector [1..n]);

compare obtained expected =
    if obtained == expected then
        true;
    else
        println "** expected: \(expected)\n   obtained: \(obtained)";
        false;
    fi;

select f = fold do r x: if f x then x::r else r fi done [];

failedTests testHash =
    select (!= "")
       (mapHash do name f:
            if f () then "" else
                println "Test \(name) failed";
                name;
            fi 
        done testHash);
        
runTests testHash =
   (failed = failedTests testHash;
    println "\(length testHash - length failed)/\(length testHash) tests passed";
    if not empty? failed then
        println "Failed tests [\(length failed)]: \(strJoin ' ' failed)";
    fi);

{
    testStream, compare, failedTests, runTests
}

