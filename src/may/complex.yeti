
module may.complex;

vec = load may.vector;
mm = load may.mathmisc;

import java.lang: ClassCastException;

class Cplx(double real, double imag)
    double getReal()
        real,
    double getImag()
        imag,
    double getMagnitude()
        sqrt (real * real + imag * imag),
    double getAngle()
        Math#atan2(imag, real),
    String toString()
        if real == int real and imag == int imag then
            if imag < 0 then
                " \(int real) - \(int (-imag))i"
            else 
                " \(int real) + \(int imag)i"
            fi
        else
            if imag < 0 then
                " \(real) - \((-imag))i"
            else 
                " \(real) + \(imag)i"
            fi
        fi,
    String format()
       (f v r =
           (s = if v == 0.0 then "0.0"
                elif abs v >= 1000.0 or abs v < 0.01 then
                    String#format("%.1E", [v as ~Double])
                else
                    String#format("%4f", [v as ~Double])
                fi;
            if r then
               (strPad ' ' (9 - strLength s) '') ^ s
            else
                strPad ' ' 8 "\(s)i";
            fi);
        if imag < 0 then
            " \(f real true)-\(f (-imag) false)"
        else 
            " \(f real true)+\(f imag false)"
        fi),
    int hashCode()
        Double#valueOf(real)#hashCode() + Double#valueOf(imag)#hashCode(),
    boolean equals(Object other)
        try
            c = other unsafely_as ~Cplx;
            c#getReal() == real and c#getImag() == imag
        catch ClassCastException:
            false
        yrt,
end;

real c1 is ~Cplx -> number =
    c1#getReal();

imaginary c1 is ~Cplx -> number =
    c1#getImag();

complex re im is number -> number -> ~Cplx =
    new Cplx(re, im);

magnitude c is ~Cplx -> number =
    c#getMagnitude();

angle c is ~Cplx -> number =
    c#getAngle();

sum' cc is list?<~Cplx> -> ~Cplx =
    complex (sum (map real cc)) (sum (map imaginary cc));

add c1 c2 is ~Cplx -> ~Cplx -> ~Cplx =
    complex (real c1 + real c2) (imaginary c1 + imaginary c2);

multiply c1 c2 is ~Cplx -> ~Cplx -> ~Cplx =
   (a = real c1;
    b = imaginary c1;
    c = real c2;
    d = imaginary c2;
    complex (a * c - b * d) (b * c + a * d)); //!!! needs unit tests

scale r c is number -> ~Cplx -> ~Cplx =
    complex (r * real c) (r * imaginary c);

zero = complex 0 0;

zeros n is number -> array<~Cplx> =
    array (map \(complex 0 0) [1..n]);

reals cc is list?<~Cplx> -> 'a =
    vec.fromList (map real cc);

imaginaries cc is list?<~Cplx> -> 'a =
    vec.fromList (map imaginary cc);

magnitudes cc is list?<~Cplx> -> 'a =
    vec.fromList (map magnitude cc);

angles cc is list?<~Cplx> -> 'a =
    vec.fromList (map angle cc);

complexArray reals imags =
    array (map2 complex (vec.list reals) (vec.list imags));

format c is ~Cplx -> string = c#format();

typedef opaque complex_t = ~may.Cplx;

{
   real,
   imaginary,
   complex,
   magnitude,
   angle,
   sum = sum',
   add,
   multiply,
   scale,
   zero,
   zeros,
   reals,
   imaginaries,
   magnitudes,
   angles,
   complexArray,
   format
} as {
   real is complex_t -> number,
   imaginary is complex_t -> number,
   complex is number -> number -> complex_t,
   magnitude is complex_t -> number,
   angle is complex_t -> number,
   sum is list?<complex_t> -> complex_t,
   add is complex_t -> complex_t -> complex_t,
   multiply is complex_t -> complex_t -> complex_t,
   scale is number -> complex_t -> complex_t,
   zero is complex_t,
   zeros is number -> array<complex_t>,
   reals is list?<complex_t> -> vec.vector_t,
   imaginaries is list?<complex_t> -> vec.vector_t,
   magnitudes is list?<complex_t> -> vec.vector_t,
   angles is list?<complex_t> -> vec.vector_t,
   complexArray is vec.vector_t -> vec.vector_t -> array<complex_t>,
   format is complex_t -> string,
}

