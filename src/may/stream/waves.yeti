
// Simple (rather than efficient) definitions of bandlimited wave
// shapes

module may.stream.waves;

{ sinusoid, generated } = load may.stream.syntheticstream;
{ sum, scaledBy, withDuration } = load may.stream.manipulate;
{ precalculatedRepeated, varyingSinusoid } = load may.stream.syntheticstream;
{ resampledTo } = load may.stream.resample;
{ gcd, floor, ceil, log10, pow, eps } = load may.mathmisc;

load may.stream.type;

cycleLengthFor sampleRate freq = 
    // The number of samples we can cache and repeat from a wavetable,
    // in order to exactly reproduce a signal of the given frequency
    // at the given samplerate. 
   (if sampleRate == int sampleRate and
       freq == int freq and
       sampleRate > 0 and freq > 0 then
        sampleRate / (gcd sampleRate freq)
    else
        period = sampleRate / freq;
        m = find do i: i * period == int (i * period) done [1..sampleRate];
        if empty? m then 0
        else period * (head m)
        fi
    fi);

square' sampleRate freq = 
    sum
       (map do n: 
            m = n*2 + 1;
            scaledBy (1/m)
               (sinusoid sampleRate (m * freq))
            done (0 :: [1 .. int (sampleRate/4 / freq) - 1]));

saw' sampleRate freq =
    sum
       (map do n:
            scaledBy if n % 2 == 0 then -1/n else 1/n fi
               (sinusoid sampleRate (n * freq))
            done [1 .. int (sampleRate/2 / freq)]);

triangle' sampleRate freq = 
    sum
       (map do n: 
            m = n*2 + 1;
            scaledBy if n % 2 == 0 then -1/(m*m) else 1/(m*m) fi
               (sinusoid sampleRate (m * freq))
            done (0 :: [1 .. int (sampleRate/4 / freq) - 1]));

// Bandlimited impulse train: produce naive pulse train at a frequency
// that is an integer fraction of the sample rate (so as to have exact
// sample locations), then resample so as to place the impulses at the
// requested frequency
impulseTrain sampleRate freq =
    if freq > sampleRate/2 then
        failWith "Can't generate impulse train with frequency > half the sample rate (\(freq) > \(sampleRate)/2)"
    else
        naiveTrain f =
           (spacing = int (sampleRate / f);
            generated sampleRate
                do n: if n % spacing == 0 then 1 else 0 fi done);
        ratio = sampleRate / freq;
        if ratio == int ratio then
            naiveTrain freq
        else
            integerRatio = floor ratio;
            naiveFreq = sampleRate / integerRatio;
            n = naiveTrain (sampleRate / integerRatio);
            resampled = resampledTo (sampleRate * naiveFreq / freq) n;
            resampled with { sampleRate };
        fi;
    fi;

//!!! todo: test. How?
sineSweep sampleRate { startFrequency, endFrequency, duration, logarithmic } =
   (forward = 
        if logarithmic then
            do x: log10 if x < eps then eps else x fi done
        else id
        fi;
    inverse =
        if logarithmic then pow 10
        else id
        fi;
    a = forward startFrequency;
    b = forward endFrequency;
    withDuration duration
       (varyingSinusoid sampleRate
            do i:
                dist = i / duration;
                inverse (a + (b - a) * dist);
            done)
    );

cached f sampleRate freq =
   (n = cycleLengthFor sampleRate freq;
    if n == 0 then
        f sampleRate freq;
    else
        // one could alternatively do
        //   repeated (precalculated sampleRate ((f sampleRate freq).read n))
        // or
        //   repeated (withDuration n (f sampleRate freq))
        precalculatedRepeated sampleRate ((f sampleRate freq).read n);
    fi);

square = cached square';
saw = cached saw';
triangle = cached triangle';

{
    square is number -> number -> stream_t,
    saw is number -> number -> stream_t, 
    triangle is number -> number -> stream_t,
    impulseTrain is number -> number -> stream_t,
    sineSweep is number -> { startFrequency is number, endFrequency is number, duration is number, logarithmic is boolean } -> stream_t,
    cycleLengthFor is number -> number -> number,
}

