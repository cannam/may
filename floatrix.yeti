module floatrix;

import java.util: Arrays;

zeros n = new double[n];
ones  n = (a = zeros n; for [0..n-1] do i: a[i] := 1.0 done; a);

vector l is list?<number> -> ~double[] =
   (arr = array(l);
    len = length arr;
    v = new double[len];
    for [0..len-1] do i: n = arr[i]; v[i] := n done;
    v);

zeroMatrix rows cols = array (map \(zeros cols) [1..rows]);

generateMatrix f rows cols =
   (m = zeroMatrix rows cols;
    for [0..rows-1] do row:
        for [0..cols-1] do col:
            m[row][col] := f row col;
        done;
    done;
    m);

constMatrix n = generateMatrix do row col: n done;

randomMatrix = generateMatrix do row col: Math#random() done;

identityMatrix = constMatrix 1;

arrayWrap a is ~double[] -> array<number> = array(a);

width m = if length m > 0 then length (arrayWrap m[0]) else 0 fi;

cols = width;

height m = length m;

rows = height;

dimensions m = { cols = width m, rows = height m };

copyOfVector v is ~double[] -> ~double[] = Arrays#copyOf(v, length(arrayWrap v));

copyOfMatrix m = array (map copyOfVector m);

transposed m is array<~double[]> -> array<~double[]> = 
    generateMatrix do row col: m[col][row] done (cols m) (rows m);
        
interleaved m = 
   ({ cols, rows } = dimensions m;
    v = zeros (cols * rows);
    for [0..rows-1] do row:
        for [0..cols-1] do col:
            v[col * rows + row] := m[row][col];
        done;
    done;
    v);

deinterleaved rows v is number -> ~double[] -> array<~double[]> =
    generateMatrix do row col:
        v[rows * col + row]
    done rows (length (arrayWrap v) / rows);

mixedDown m =
   (if empty? m then zeros 0 else
        { cols, rows } = dimensions m;
        v = copyOfVector m[0];
        for [1..rows-1] do row:
            for [0..cols-1] do col:
                v[col] := v[col] + m[row][col];
            done;
        done;
        v;
    fi);

mixedDownFromInterleaved rows v is number -> ~double[] -> ~double[] =
   (cols = (length (arrayWrap v) / rows);
    v' = zeros cols;
    for [0..rows-1] do row:
        for [0..cols-1] do col:
            v'[col] := v'[col] + v[col * rows + row];
        done;
    done;
    v');

{
zeros, ones, vector,
generateMatrix, constMatrix, randomMatrix, zeroMatrix, identityMatrix,
width, cols, height, rows, dimensions,
copyOfVector, copyOfMatrix,
transposed, interleaved, deinterleaved,
mixedDown, mixedDownFromInterleaved,
}

